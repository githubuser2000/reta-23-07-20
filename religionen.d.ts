declare var col: any;
declare var selectedSpaltenMany1: Map<number, HTMLElement>;
declare var selectedSpaltenMany2: Map<number, string>;
declare var labelstyle: string;
declare var labelstylekl: string;
declare var tdStyleWhiteSpace: string;
declare var tdStyleFontSize: string;
declare var tdStyleFontSizeKl: string;
declare var tdStyleColorKl: string;
declare var Enume: Set<number>;
declare var mapMapMapTags: Map<number, string[]>;
declare var chks1: HTMLCollectionOf<HTMLInputElement>;
declare var chks2: string[][];
declare var spaltenTags: Array<Array<any>>;
declare var spalten4spaltenTags: Map<number, Array<HTMLTableCellElement>>;
declare var Achks: HTMLCollectionOf<HTMLInputElement | Element>;
declare let tdClasses: HTMLCollectionOf<HTMLTableCellElement>;
declare var mapMapMap: Map<string, string | Map<string, string | Map<any, any>>>;
declare var insertnull: string;
declare function returnChangeButtons(number1: number | string): string;
declare function makeMapsOfHeadLCheckB(p1: string, p2: string | null, num: string | number, tags: any): void;
declare function disEnAbleChks(Enums1: Array<number> | Set<number> | HTMLCollectionOf<any>): void;
declare const alleMonde: number[];
declare const primZahlen: number[];
declare function makeSpacesOutOf_(text: string): string;
declare function copyClassNameToOrderedGrunstruk(mapMapMap: Map<string, string | Map<string, string | Map<any, any>>>, mapMapMapTags: Map<number, string>, p1keys: string[], p2keys: Array<string | Map<any, any>>, grunSi: number, grunp2Keys: Array<string | Map<any, any>>): void;
declare function grundSDivToggleBeachte(para?: string, dasTag?: boolean): void;
declare function grundSDivToggle(id_: number): void;
declare function toggleP2(dasTag: HTMLInputElement, spaltenNummern1: Array<Map<any, any>> | string, para1u2: string): void;
declare function MatrixHasCouple(couple: string, SpaltenNumberToParameters: Map<number, string>): Set<number>;
declare function toggleForNums(colNums: string[]): void;
declare function refresh(): void;
declare function updateVisibleHeadingsNumbersAndItsKeysList(): void;
declare function toggleName(p2: HTMLElement): void;
declare function toggleP1(p1: string): void;
declare function toggleSpalten(colNumber: number): void;
declare var tableHeadline: HTMLTableCellElement;
declare var visibleHeadingsSelectUnsorted: Map<number, HTMLElement>;
declare var visibleHeadingsNumbers: Map<number, string[]>;
declare function changeHeadline(oneColHeading: HTMLTableCellElement, addTrueRemoveFalse: boolean): void;
declare function makeSpalteUnsichtbar(spalteToUnsichtbar: HTMLCollectionOf<HTMLTableCellElement>, momentaneSpalte_als_r_: number, hiddenTrueVisibleFalse: boolean): void;
declare var erstesMal: boolean;
declare function headingSelected(gewaehlteSpalte_plusgleich1a: HTMLSelectElement, momentaneSpalte_als_r_1: string): void;
declare var selectionsBefore: number;
declare var optionsS: string[][];
declare var sichtbareSpaltenNummern: string[];
declare function sortedKeysOfHeadingNumbersByVisibility(): void;
declare function setAllListsInHeadings(): void;
declare function toggleChkSpalten(): void;
declare function isZeilenAngabe_betweenKommas(g: string): boolean;
declare function isZeilenAngabe(text: string): boolean;
declare function BereichToNumbers2(MehrereBereiche: string, vielfache?: boolean, maxZahl?: number): Set<number>;
declare function BereichToNumbers2_EinBereich(EinBereich: string, dazu: Set<number>, hinfort: Set<number>, maxZahl: number, vielfache: boolean): void;
declare function BereichToNumbers2_EinBereich_Menge(BereichCouple: string[], around: number[], maxZahl: number, menge: Set<number>, vielfache: boolean): void;
declare function BereichToNumbers2_EinBereich_Menge_vielfache(BereichCouple: string[], around: number[], maxZahl: number, menge: Set<number>): void;
declare function BereichToNumbers2_EinBereich_Menge_nichtVielfache(BereichCouple: string[], around: number[], maxZahl: number, menge: Set<number>): void;
declare function zeilenAngabenToMengeDirekt(welches?: number, v?: boolean): Set<number>;
declare var erlaubteZeilen: Set<number>;
declare function makeAllerlaubteZeilenVielfacher(zeilenAngaben1: Set<number[]>): Set<number>;
declare function makeAllerlaubteZeilenPotenzen(zeilenAngaben1: Set<number>): Set<number>;
declare function intersection(setA: Set<any>, setB: Set<any>): Set<unknown>;
declare function makeAllAllowedZeilenPrimRichtungen(): Set<number>;
declare function makeAllAllowedZeilenHimmelskoerper(): Set<number>;
declare function makeAllowedZeilenFromPrimVielfacher(zeilenAngaben1: Set<number>): Set<number>;
declare function zahlIstVielfacherEinerPrimzahl(zahl1: number | string, vielfacher1: string | number): boolean;
declare function makeAllowedZeilenFromZaehlung(zeilenMenge: Set<number>): Set<number>;
declare function makeAllAllowedZeilen(zeilenAngaben1: Set<number[]>): Set<number>;
declare function makeAllowedZeilenFromPrimZahlKreuzRadius(zeilenAngaben1: Set<number>): number[];
declare var spalten_r__: Set<number>;
declare function get_r__SpaltenNummern(): void;
declare function erlaubeVerbieteZeilenBeiZeilenErlaubenVerbieten(which: number): void;
declare function zeilenLetztendlichZeigenVerstecken(s: number, neuErlauben: boolean, dazuErlauben: boolean, neuHinfort: boolean, dazuHinfort: boolean, tabellenZelle: HTMLTableRowElement, dazuEinschraenkend: boolean): void;
declare function clickPotenzenErlaubenUsw(): void;
declare function clickVielfacheErlaubenUsw(): void;
declare function clickHimmelskoerperErlaubenUsw(): void;
declare function clickZeilenErlaubenUsw(): void;
declare function clickZaehlungenErlaubenUsw(): void;
declare function clickPrimVielfacheErlaubenUsw(): void;
declare function clickPrimRichtungenErlaubenUsw(): void;
declare function clickPrimZahlKreuzRadiusErlaubenUsw(): void;
//# sourceMappingURL=religionen.d.ts.map